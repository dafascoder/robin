// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (account_id, name) VALUES ($1,$2) RETURNING id, account_id, name
`

type CreateUserParams struct {
	AccountID uuid.UUID `json:"account_id"`
	Name      string    `json:"name"`
}

type CreateUserRow struct {
	ID        uuid.UUID `json:"id"`
	AccountID uuid.UUID `json:"account_id"`
	Name      string    `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.AccountID, arg.Name)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.AccountID, &i.Name)
	return i, err
}

const getUserByAccountID = `-- name: GetUserByAccountID :one
SELECT id, account_id, name, bio, image, created_at, updated_at FROM "user"
WHERE account_id = $1 LIMIT 1
`

func (q *Queries) GetUserByAccountID(ctx context.Context, accountID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByAccountID, accountID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, account_id, name, bio, image, created_at, updated_at FROM "user"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
