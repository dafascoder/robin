// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (email, password) VALUES ($1,$2) RETURNING id,"email"
`

type CreateAccountParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreateAccountRow struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Email, arg.Password)
	var i CreateAccountRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT id, email, password, verified, refresh_token_version, created_at, updated_at FROM account
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.RefreshTokenVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE account SET password = $2 WHERE id = $1
RETURNING id, email
`

type UpdatePasswordParams struct {
	ID       uuid.UUID `json:"id"`
	Password string    `json:"password"`
}

type UpdatePasswordRow struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (UpdatePasswordRow, error) {
	row := q.db.QueryRow(ctx, updatePassword, arg.ID, arg.Password)
	var i UpdatePasswordRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const updateRefreshTokenVersion = `-- name: UpdateRefreshTokenVersion :one
UPDATE account SET refresh_token_version = refresh_token_version + 1 WHERE id = $1
RETURNING id, email, refresh_token_version
`

type UpdateRefreshTokenVersionRow struct {
	ID                  uuid.UUID `json:"id"`
	Email               string    `json:"email"`
	RefreshTokenVersion int32     `json:"refresh_token_version"`
}

func (q *Queries) UpdateRefreshTokenVersion(ctx context.Context, id uuid.UUID) (UpdateRefreshTokenVersionRow, error) {
	row := q.db.QueryRow(ctx, updateRefreshTokenVersion, id)
	var i UpdateRefreshTokenVersionRow
	err := row.Scan(&i.ID, &i.Email, &i.RefreshTokenVersion)
	return i, err
}

const verifyAccount = `-- name: VerifyAccount :one
UPDATE account SET verified = true WHERE id = $1
RETURNING id, email, verified
`

type VerifyAccountRow struct {
	ID       uuid.UUID `json:"id"`
	Email    string    `json:"email"`
	Verified *bool     `json:"verified"`
}

func (q *Queries) VerifyAccount(ctx context.Context, id uuid.UUID) (VerifyAccountRow, error) {
	row := q.db.QueryRow(ctx, verifyAccount, id)
	var i VerifyAccountRow
	err := row.Scan(&i.ID, &i.Email, &i.Verified)
	return i, err
}
